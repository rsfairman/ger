
Use Notes
---------

This should work, even though it far from the intended final
result. It should be fairly self-explanatory. Open a file that
contains G-code, and you can either translate it or render it. The
"Translate" menu offers different degrees of translation. For the most
part, you want to use "Thru Cutter Comp" or "Thru Prerender." The
other options may be helpful when debugging G-code since they translate
only up to a certain point.

There is only one form of rendering: "Flat Path." It's "flat" because
it's purely 2D, and it's "path" because it simply draws a pixel
wherever the center of the tool dips below z=0. You can pan and zoom
this.

See docs/manual.pdf for an overview of the G-codes. What appears there
should be accurate. The program will accept, translate and render most
G-codes, but not the codes for cutter comp (G40, 41 and 42).

---------------

If you're not running with an IDE, you can run with

java -jar ger.jar

This accepts various arguments. See Main.handleCLI(). With no
arguments, it will launch the GUI; or say

java -jar ger.jar gui

---------------

Various aspects of the program depend on data that persists between
launches. By default, this data is found in

System.getProperty("user.dir")/.ger

so, wherever you launch the program from. You can change this
directory with

java -jar ger.jar change "whatever directory"

It uses the *given* directory, not a sub-directory called '.ger' even
though I refer to "the .ger directory" as the generic name for
whatever the actual path may be. The command is called 'change'
because you are effectively changing the overall machine setup (tool
table, etc.)

It's easy to get mixed up about where this points, so

java -jar ger.jar change 

(no specified directory) will tell you which directory is being used.

---------------

To run the unit tests, say

java -jar ger.jar test 

There are some test now, in src/unit_tests, but more would be good.

---------------

To *use* this thing, as one normally would, say

java -jar ger.jar translate "the file"

(or use the GUI). The result will go to stdout. It translates by
applying the Lexer, the Parser, etc., just as though you had used the
GUI and asked for translation "Thru Cutter Comp."

---------------

Wizards...

Wizards are intended to be compiled from the CLI, although the GUI will
attempt to compile them too. Under the GUI, if compilation fails, then
it merely reports the failure. As we discussed, this program is not
the place to compose or debug Java.

To compile a wizard, put the *.java file into the .ger directory and say

java -jar ger.jar compile "the *.java file name"

It should generate the *.class file in the .ger directory. Errors are
reported to stdout (or maybe stderr -- haven't checked).

There's an example wizard in the wizard_test package: SimpleWiz. What
matters is that it must extend vcnc.wizard.WizardBase, and it must
belong to the wizard_test package. In particular, define the
definiton() method by making a series of calls to any of 

G00() -- output 'G00'
G01() -- output 'G01'
Move() -- see below

The Move() method returns a MoveMaker object which has methods of its
own, one for each element that could appear in a move. So, to output
X1.0 Y2.0
you'd say
Move().X(1.0).Y(2.0),
or any combination of successive calls to X(), Y(), Z() and F() (for
feed rate).

The person writing the wizard doesn't need to understand anything
about MoveMaker other than the fact that it's used as above.

I have not provided other methods or classes in WizardBase, partly
because I want to see what you think and whether this seems natural or
you can come up with a better approach. If we use this general
framework, it wouldn't be hard to write an ArcMaker class that works
just like MoveMaker, but for G02/G03. Most of the other methods will be
a simple matter of outputing a single G/M-code, with no arguments.

To use a wizard from your G-code, refer to it by the class name, and
the arguments to the wizard take up everything up to the EOL where the
wizard appears. Thus, if you compiled BoltCircle.java, then to use it,
you might say

BoltCircle 5.00 6 30.0

where 5.00 is the radius, with 6 holes and the first one at 30 degrees
from the vertical (or however you've set up the arguments). Text
arguments are permitted, enclosed in double-quotes. The arguments come
into the definition() method as an ArrayList<Object>, where the
entires are either Double or String. Integer values, like the '6' in
the example above, are converted to double type. 

---------------

The Code...

You are most welcome (!) to find bugs or problems anywhere, but here's
a list of the things you are most likely to want to look at, either
because there's a problem or simply to understand.

By searching for two particular annotations, you'll find places that
may need some attention.

"BUG" means that there is either a known issue that must be resolved,
or merely something that's less than ideal and could be improved.

"NOTE" is used for things that have been resolved, and I'm leaning
toward saying that they have been permanently resolved, but that
don't feel quite right.

Some of thing things that could use an additional set of eyes are:

* The way certain data persists between runs of the program. It works
  now, but maybe there's a better way.
* The whole framework around compiling wizards. Again, it works, but
  it's not entirely satisfactory.
* The mess of drag and drop when moving tabs from one window to
  another. This is a matter of digging into Swing and making what's
  been done tidier.
* The way the user writes wizards -- the facility provided for him to
  say G-whatever. I like what's there, but maybe there's a better way. 
  Also, the only thing wizards can currently do is make linear
  moves. Adding other G/M-codes is almost entirely a matter of
  boiler-plate, and that would be an easy contribution to make. I've
  been holding off on that until it's definite that the current
  framework around wizards is the ultimate solution.




